const TelegramBot = require("node-telegram-bot-api");
const fs = require('fs');
const express = require("express");
const cors = require("cors");
require('dotenv').config();

const app = express();
app.use(express.json());
app.use(cors());
const PORT = process.env.PORT || 8000;

const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });
const webAppUrl = "https://harmonious-khapse-11b1a2.netlify.app/";
const webAppWeatherUrl = "https://willowy-liger-db95b6.netlify.app/";
const webAppTodoUrl = "https://chimerical-capybara-706fa0.netlify.app/";
const webAppShoppingUrl = "https://delightful-faun-941e5c.netlify.app/";

const chatChannelId = process.env.CHAT_ID;

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  if (text === "/start") {
    await bot.sendMessage(chatId, "–ù–∏–∂–µ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —Å –º–æ–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏", {
      reply_markup: {
        keyboard: [
          // [{ text: "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É", web_app: { url: webAppUrl + "form" } }],
          [{ text: "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", web_app: { url: webAppWeatherUrl } }],
          [
            {
              text: "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TODO",
              web_app: { url: webAppTodoUrl },
            },
          ],
          [{ text: "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –°–æ—Ñ–∏—á38", web_app: { url: webAppShoppingUrl } }],
        ],
      },
    });
    await bot.sendMessage(
      chatId,
      "–ó–∞—Ö–æ–¥–∏ –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", web_app: { url: webAppUrl } }],
          ],
        },
      }
    );
  }

  if (msg?.web_app_data?.data) {
    try {
      const data = JSON.parse(msg?.web_app_data?.data);
      await bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ –≤ –°–æ—Ñ–∏—á38! üçÜ");

      await bot.sendMessage(
        chatId,
        `–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—É–º–º—É: ${
          data?.totalPrice.toFixed(2)
        }—Ä—É–±.üí™\n–°–ø–∏—Å–æ–∫:\n${data?.products.map(
          (product) => `üîπ ${product.title} - ${product.quantity} —à—Ç.`
        ).join('\n')}
      `
      );
      await bot.sendMessage(
        chatChannelId,
        `–ö–ª–∏–µ–Ω—Ç ${msg.chat.first_name} ${msg.chat.last_name} —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏–æ–±—Ä–µ–ª —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—É–º–º—É: ${
          data?.totalPrice.toFixed(2)
        }—Ä—É–±\n–°–ø–∏—Å–æ–∫:\n${data?.products.map(
          (product) => `- ${product.title} - ${product.quantity} —à—Ç.`
        ).join('\n')}
      `
      );
      // await bot.sendMessage(chatId, '–í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞: ' + data?.country);
      // await bot.sendMessage(chatId, '–í–∞—à–∞ —É–ª–∏—Ü–∞: ' + data?.street);

      setTimeout(async () => {
        await bot.sendMessage(chatId, "–í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –° –ª—é–±–æ–≤—å—é, –≤–∞—à –®–µ—Ñ ‚ù§Ô∏è");
        await bot.sendPhoto(chatId, 'https://png.pngtree.com/element_our/png/20180918/chef-cooking-fried-chicken-and-delicious-sign-png_103460.jpg');
      }, 3000);
    } catch (e) {
      console.log(e);
    }
  }
});

app.post("/web-data", async (req, res) => {
  const { queryId, products, totalPrice } = req.body;
  try {
    await bot.answerWebAppQuery(queryId, {
      type: "article",
      id: queryId,
      title: "–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞",
      input_message_content: {
        message_text: `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–æ–π, –≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å—É–º–º—É ${totalPrice}`,
      },
    });
    return res.status(200).json({});
  } catch (e) {
    await bot.answerWebAppQuery(queryId, {
      type: "article",
      id: queryId,
      title: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä",
      input_message_content: { message_text: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä" },
    });
    return res.status(500).json({});
  }
});

app.post('/signup', async (req, res) => {
  const URL_API = `https://api.telegram.org/bot${ process.env.TELEGRAM_TOKEN }/sendMessage`;
  const {name, email, password} = req.body.data;
  let message = `<b>–ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!</b>\n`;
  message += `<b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: </b> ${name}\n`;
  message += `<b>–ü–æ—á—Ç–∞: </b> ${email}\n`;
  message += `<b>–ü–∞—Ä–æ–ª—å: </b> ${password}`;

  try {
    const response = await fetch(URL_API, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: chatChannelId,
        parse_mode: 'html',
        text: message,
      })
    })
    const data = await response.json();
  
    if (data.ok) {
      return res.status(200).json({message: '–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!'});
    } else {
      return res.status(400).json({message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'});
    }
  } catch (error) {
    return res.status(500).json({message: '–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö!'});
  }
});

app.post('/signup-tg', async (req, res) => {
  const {name, email, password} = req.body.data;
  let message = `<b>–ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!</b>\n`;
  message += `<b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: </b> ${name}\n`;
  message += `<b>–ü–æ—á—Ç–∞: </b> ${email}\n`;
  message += `<b>–ü–∞—Ä–æ–ª—å: </b> ${password}`;

  try {
    await bot.sendMessage(chatChannelId, message, {parse_mode: 'HTML'});
    return res.status(200).json({message: '–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!'});
  } catch (error) {
    return res.status(500).json({message: '–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö!'});
  }
});

app.listen(PORT, () => `Server started on PORT: ${PORT}`);
